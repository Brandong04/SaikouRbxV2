"use strict";
const fs_1 = require("fs");
const chalk_1 = require("chalk");
module.exports = (bot) => {
    const load = (directories) => {
        let commands = [];
        try {
            commands = fs_1.readdirSync(`${__dirname}/../commands/${directories}/`).filter((directoryFile) => directoryFile.endsWith('.js'));
        }
        catch {
            return console.error(`${chalk_1.redBright('ERROR!')} The command folder "${directories}" couldn't be loaded.\n${chalk_1.redBright('ERROR!')} Please ensure a file is added in it to be loaded.`);
        }
        for (const commandFile of commands) {
            const command = require(`${__dirname}/../commands/${directories}/${commandFile}`);
            if (!command.config)
                return console.error(`${chalk_1.redBright('ERROR!')} The command file "${commandFile}" couldn't be loaded.\n${chalk_1.redBright('ERROR!')} Please ensure the config options are added for it to be loaded.`);
            bot.commands.set(command.config.commandName, command);
            if (command.config.commandAliases)
                command.config.commandAliases.forEach((alias) => bot.aliases.set(alias, command.config.commandName));
        }
    };
    ['staff-only', 'dev-only'].forEach((folder) => load(folder));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oYW5kbGVycy9sb2FkLWNvbW1hbmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQkFBaUM7QUFDakMsaUNBQWtDO0FBRWxDLGlCQUFTLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDckIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxXQUFtQixFQUFFLEVBQUU7UUFDcEMsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO1FBRTVCLElBQUk7WUFDSCxRQUFRLEdBQUcsZ0JBQVcsQ0FBQyxHQUFHLFNBQVMsZ0JBQWdCLFdBQVcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBcUIsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3BJO1FBQUMsTUFBTTtZQUNQLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLGlCQUFTLENBQUMsUUFBUSxDQUFDLHdCQUF3QixXQUFXLDBCQUEwQixpQkFBUyxDQUFDLFFBQVEsQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO1NBQ2pMO1FBRUQsS0FBSyxNQUFNLFdBQVcsSUFBSSxRQUFRLEVBQUU7WUFDbkMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsU0FBUyxnQkFBZ0IsV0FBVyxJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFFbEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNO2dCQUFFLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLGlCQUFTLENBQUMsUUFBUSxDQUFDLHNCQUFzQixXQUFXLDBCQUEwQixpQkFBUyxDQUFDLFFBQVEsQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO1lBQ2xOLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3RELElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjO2dCQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUNoSjtJQUNGLENBQUMsQ0FBQztJQUNGLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZGRpclN5bmMgfSBmcm9tICdmcyc7XHJcbmltcG9ydCB7IHJlZEJyaWdodCB9IGZyb20gJ2NoYWxrJztcclxuXHJcbmV4cG9ydCA9IChib3Q6IGFueSkgPT4ge1xyXG5cdGNvbnN0IGxvYWQgPSAoZGlyZWN0b3JpZXM6IHN0cmluZykgPT4ge1xyXG5cdFx0bGV0IGNvbW1hbmRzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdGNvbW1hbmRzID0gcmVhZGRpclN5bmMoYCR7X19kaXJuYW1lfS8uLi9jb21tYW5kcy8ke2RpcmVjdG9yaWVzfS9gKS5maWx0ZXIoKGRpcmVjdG9yeUZpbGU6IHN0cmluZykgPT4gZGlyZWN0b3J5RmlsZS5lbmRzV2l0aCgnLmpzJykpO1xyXG5cdFx0fSBjYXRjaCB7XHJcblx0XHRcdHJldHVybiBjb25zb2xlLmVycm9yKGAke3JlZEJyaWdodCgnRVJST1IhJyl9IFRoZSBjb21tYW5kIGZvbGRlciBcIiR7ZGlyZWN0b3JpZXN9XCIgY291bGRuJ3QgYmUgbG9hZGVkLlxcbiR7cmVkQnJpZ2h0KCdFUlJPUiEnKX0gUGxlYXNlIGVuc3VyZSBhIGZpbGUgaXMgYWRkZWQgaW4gaXQgdG8gYmUgbG9hZGVkLmApO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAoY29uc3QgY29tbWFuZEZpbGUgb2YgY29tbWFuZHMpIHtcclxuXHRcdFx0Y29uc3QgY29tbWFuZCA9IHJlcXVpcmUoYCR7X19kaXJuYW1lfS8uLi9jb21tYW5kcy8ke2RpcmVjdG9yaWVzfS8ke2NvbW1hbmRGaWxlfWApO1xyXG5cclxuXHRcdFx0aWYgKCFjb21tYW5kLmNvbmZpZykgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYCR7cmVkQnJpZ2h0KCdFUlJPUiEnKX0gVGhlIGNvbW1hbmQgZmlsZSBcIiR7Y29tbWFuZEZpbGV9XCIgY291bGRuJ3QgYmUgbG9hZGVkLlxcbiR7cmVkQnJpZ2h0KCdFUlJPUiEnKX0gUGxlYXNlIGVuc3VyZSB0aGUgY29uZmlnIG9wdGlvbnMgYXJlIGFkZGVkIGZvciBpdCB0byBiZSBsb2FkZWQuYCk7XHJcblx0XHRcdGJvdC5jb21tYW5kcy5zZXQoY29tbWFuZC5jb25maWcuY29tbWFuZE5hbWUsIGNvbW1hbmQpO1xyXG5cdFx0XHRpZiAoY29tbWFuZC5jb25maWcuY29tbWFuZEFsaWFzZXMpIGNvbW1hbmQuY29uZmlnLmNvbW1hbmRBbGlhc2VzLmZvckVhY2goKGFsaWFzOiBzdHJpbmcpID0+IGJvdC5hbGlhc2VzLnNldChhbGlhcywgY29tbWFuZC5jb25maWcuY29tbWFuZE5hbWUpKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdFsnc3RhZmYtb25seScsICdkZXYtb25seSddLmZvckVhY2goKGZvbGRlcikgPT4gbG9hZChmb2xkZXIpKTtcclxufTtcclxuIl19