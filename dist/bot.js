"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const dotenv_1 = require("dotenv");
const embeds_1 = require("./utils/embeds");
dotenv_1.config();
const webhookClient = new discord_js_1.WebhookClient({ id: `${BigInt(String(process.env.WEBHOOK_ID))}`, token: `${process.env.WEBHOOK_TOKEN}` });
const bot = new discord_js_1.Client({
    intents: [discord_js_1.Intents.FLAGS.GUILD_MESSAGES, discord_js_1.Intents.FLAGS.GUILDS],
    allowedMentions: { parse: ['users', 'roles'], repliedUser: true },
    presence: { activities: [{ name: 'ðŸ¤– Starting up...' }] },
});
bot.commands = new discord_js_1.Collection();
bot.cooldowns = new discord_js_1.Collection();
bot.aliases = new discord_js_1.Collection();
['commands', 'aliases'].forEach((collection) => {
    // @ts-ignore
    bot[collection] = new discord_js_1.Collection();
});
['load-commands', 'load-events'].forEach((handlerFile) => require(`./handlers/${handlerFile}.js`)(bot));
process.on('uncaughtException', (error) => {
    console.error(error);
    embeds_1.errorEmbed(webhookClient, bot, error.name, error.message);
});
process.on('unhandledRejection', (error) => {
    console.error(error);
    embeds_1.errorEmbed(webhookClient, bot, error.name, error.message);
});
bot.login(process.env.DISCORD_TOKEN);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JvdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUF3RTtBQUN4RSxtQ0FBZ0M7QUFDaEMsMkNBQTRDO0FBRTVDLGVBQU0sRUFBRSxDQUFDO0FBRVQsTUFBTSxhQUFhLEdBQWtCLElBQUksMEJBQWEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFbkosTUFBTSxHQUFHLEdBQVcsSUFBSSxtQkFBTSxDQUFDO0lBQzlCLE9BQU8sRUFBRSxDQUFDLG9CQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxvQkFBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDN0QsZUFBZSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUU7SUFDakUsUUFBUSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFO0NBQ3pELENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7QUFDaEMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztBQUNqQyxHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0FBRS9CLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtJQUN0RCxhQUFhO0lBQ2IsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksdUJBQVUsRUFBRSxDQUFDO0FBQ3BDLENBQUMsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBbUIsRUFBVSxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsV0FBVyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRXhILE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNoRCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLG1CQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzRCxDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtJQUNqRCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLG1CQUFVLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMzRCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCwgV2ViaG9va0NsaWVudCwgSW50ZW50cywgQ29sbGVjdGlvbiB9IGZyb20gJ2Rpc2NvcmQuanMnO1xyXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdkb3RlbnYnO1xyXG5pbXBvcnQgeyBlcnJvckVtYmVkIH0gZnJvbSAnLi91dGlscy9lbWJlZHMnO1xyXG5cclxuY29uZmlnKCk7XHJcblxyXG5jb25zdCB3ZWJob29rQ2xpZW50OiBXZWJob29rQ2xpZW50ID0gbmV3IFdlYmhvb2tDbGllbnQoeyBpZDogYCR7QmlnSW50KFN0cmluZyhwcm9jZXNzLmVudi5XRUJIT09LX0lEKSl9YCwgdG9rZW46IGAke3Byb2Nlc3MuZW52LldFQkhPT0tfVE9LRU59YCB9KTtcclxuXHJcbmNvbnN0IGJvdDogQ2xpZW50ID0gbmV3IENsaWVudCh7XHJcblx0aW50ZW50czogW0ludGVudHMuRkxBR1MuR1VJTERfTUVTU0FHRVMsIEludGVudHMuRkxBR1MuR1VJTERTXSxcclxuXHRhbGxvd2VkTWVudGlvbnM6IHsgcGFyc2U6IFsndXNlcnMnLCAncm9sZXMnXSwgcmVwbGllZFVzZXI6IHRydWUgfSxcclxuXHRwcmVzZW5jZTogeyBhY3Rpdml0aWVzOiBbeyBuYW1lOiAn8J+kliBTdGFydGluZyB1cC4uLicgfV0gfSxcclxufSk7XHJcblxyXG5ib3QuY29tbWFuZHMgPSBuZXcgQ29sbGVjdGlvbigpO1xyXG5ib3QuY29vbGRvd25zID0gbmV3IENvbGxlY3Rpb24oKTtcclxuYm90LmFsaWFzZXMgPSBuZXcgQ29sbGVjdGlvbigpO1xyXG5cclxuWydjb21tYW5kcycsICdhbGlhc2VzJ10uZm9yRWFjaCgoY29sbGVjdGlvbjogc3RyaW5nKSA9PiB7XHJcblx0Ly8gQHRzLWlnbm9yZVxyXG5cdGJvdFtjb2xsZWN0aW9uXSA9IG5ldyBDb2xsZWN0aW9uKCk7XHJcbn0pO1xyXG5bJ2xvYWQtY29tbWFuZHMnLCAnbG9hZC1ldmVudHMnXS5mb3JFYWNoKChoYW5kbGVyRmlsZTogc3RyaW5nKTogc3RyaW5nID0+IHJlcXVpcmUoYC4vaGFuZGxlcnMvJHtoYW5kbGVyRmlsZX0uanNgKShib3QpKTtcclxuXHJcbnByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgKGVycm9yOiBFcnJvcikgPT4ge1xyXG5cdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG5cdGVycm9yRW1iZWQod2ViaG9va0NsaWVudCwgYm90LCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcclxufSk7XHJcblxyXG5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCAoZXJyb3I6IEVycm9yKSA9PiB7XHJcblx0Y29uc29sZS5lcnJvcihlcnJvcik7XHJcblx0ZXJyb3JFbWJlZCh3ZWJob29rQ2xpZW50LCBib3QsIGVycm9yLm5hbWUsIGVycm9yLm1lc3NhZ2UpO1xyXG59KTtcclxuXHJcbmJvdC5sb2dpbihwcm9jZXNzLmVudi5ESVNDT1JEX1RPS0VOKTtcclxuIl19